/* LEDC (LED Controller) fade example

   This example code is in the Public Domain (or CC0 licensed, at your option.)

   Unless required by applicable law or agreed to in writing, this
   software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
   CONDITIONS OF ANY KIND, either express or implied.
*/
#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/semphr.h"
#include "driver/ledc.h"
#include "esp_err.h"

/*
 * About this example
 *
 * 1. Start with initializing LEDC module:
 *    a. Set the timer of LEDC first, this determines the frequency
 *       and resolution of PWM.
 *    b. Then set the LEDC channel you want to use,
 *       and bind with one of the timers.
 *
 * 2. You need first to install a default fade function,
 *    then you can use fade APIs.
 *
 * 3. You can also set a target duty directly without fading.
 *
 * 4. On ESP32, GPIO18/19/4/5 are used as the LEDC outputs:
 *              GPIO18/19 are from the high speed channel group
 *              GPIO4/5 are from the low speed channel group
 *
 *    On other targets, GPIO8/9/4/5 are used as the LEDC outputs,
 *    and they are all from the low speed channel group.
 *
 * 5. All the LEDC outputs change the duty repeatedly.
 *
 */

///////////////////////////////////////////////////////////////////////////////
/*/////////////////////////////IDEIA DO TRABALHO/////////////////////////////*/
//////////////////////////////////////////////////////////////////////////////

/*
//FUNCIONALIDADE
- Utilizar a função de fade em um led do tipo RGB, de modo a variar sua cor.
- Utilizar um display LCD para mostrar o percentual de cada PWM do LED e a cor correspondente.

//PASSOS
- Extrair o percentual do duty cicle a partir da função de fade.
- Implementar a escala para determinação da cor correspondente a partir do percentual de cada composição.
- Implementar o LCD a partir do i2c.
- Transmitir as informações para o LCD.

*/

//Primeiramente são definidas as constantes e variaveis globais
#define LEDC_HS_CH0_GPIO       (17)                 // VERMELHO
#define LEDC_HS_CH0_CHANNEL    LEDC_CHANNEL_0       //

#define LEDC_HS_CH1_GPIO       (16)                 // VERDE
#define LEDC_HS_CH1_CHANNEL    LEDC_CHANNEL_1       //

#define LEDC_HS_CH2_GPIO       (26)                 // AZUL
#define LEDC_HS_CH2_CHANNEL    LEDC_CHANNEL_2       //

#define LEDC_HS_TIMER          LEDC_TIMER_0         //
#define LEDC_HS_MODE           LEDC_HIGH_SPEED_MODE //

#define LEDC_LS_TIMER          LEDC_TIMER_1         //
#define LEDC_LS_MODE           LEDC_LOW_SPEED_MODE  //

#define LEDC_TEST_CH_NUM       (3)
#define LEDC_TEST_DUTY         (4000)
#define LEDC_TEST_FADE_TIME    (5000)

//Callback que será chamado quando a operação de "fade" terminar
static IRAM_ATTR bool cb_ledc_fade_end_event(const ledc_cb_param_t *param, void *user_arg)
{
    portBASE_TYPE taskAwoken = pdFALSE;

    if (param->event == LEDC_FADE_END_EVT) {
        SemaphoreHandle_t counting_sem = (SemaphoreHandle_t) user_arg;
        xSemaphoreGiveFromISR(counting_sem, &taskAwoken);
    }

    return (taskAwoken == pdTRUE);
}

void app_main(void)
{
    int ch;

    //Preparação e definição das configurações do timer que será utilizado para controle do LED
    ledc_timer_config_t ledc_timer = {
        .duty_resolution = LEDC_TIMER_13_BIT,   // Resolução do duty cycle do PWM com 13 bits
        .freq_hz = 5000,                        // Frequência, em Hz, do sinal PWM
        .speed_mode = LEDC_LS_MODE,             // Modo "temporizador"
        .timer_num = LEDC_LS_TIMER,             // Indicador do "temporizador"
        .clk_cfg = LEDC_AUTO_CLK,               // Seleção automática do clock
    };
    
    // Definie as configurações do TIMER0 relativo aos canais de "alta velocidade"
    ledc_timer_config(&ledc_timer);

    // Definie as configurações do TIMER1 relativo aos canais de "baixa velocidade"
    ledc_timer.speed_mode = LEDC_HS_MODE;
    ledc_timer.timer_num = LEDC_HS_TIMER;
    ledc_timer_config(&ledc_timer);

    //Configuração individual de cada canal que compõe o LED:
    //      - Número do canal a ser controlado
    //      - Duty cycle, inicializado em 0
    //      - Número do GPIO que o LED está conectado
    //      - Modo de alta ou baixa velocidade
    //      - Temporizador
    ledc_channel_config_t ledc_channel[LEDC_TEST_CH_NUM] = {
#if CONFIG_IDF_TARGET_ESP32
        {
            .channel    = LEDC_HS_CH0_CHANNEL,
            .duty       = 0,
            .gpio_num   = LEDC_HS_CH0_GPIO,
            .speed_mode = LEDC_HS_MODE,
            .hpoint     = 0,
            .timer_sel  = LEDC_HS_TIMER,
            .flags.output_invert = 0
        },
        {
            .channel    = LEDC_HS_CH1_CHANNEL,
            .duty       = 0,
            .gpio_num   = LEDC_HS_CH1_GPIO,
            .speed_mode = LEDC_HS_MODE,
            .hpoint     = 0,
            .timer_sel  = LEDC_HS_TIMER,
            .flags.output_invert = 0
        },
        {
            .channel    = LEDC_HS_CH2_CHANNEL,
            .duty       = 0,
            .gpio_num   = LEDC_HS_CH2_GPIO,
            .speed_mode = LEDC_HS_MODE,
            .hpoint     = 0,
            .timer_sel  = LEDC_HS_TIMER,
            .flags.output_invert = 0
        },
#endif
    };

    // Define cada um dos LEDs com configurações previamente preparadas
    for (ch = 0; ch < LEDC_TEST_CH_NUM; ch++) {
        ledc_channel_config(&ledc_channel[ch]);
    }

    // Inicializa o processo de fade
    ledc_fade_func_install(0);
    ledc_cbs_t callbacks = {
        .fade_cb = cb_ledc_fade_end_event
    };
    SemaphoreHandle_t counting_sem = xSemaphoreCreateCounting(LEDC_TEST_CH_NUM, 0);

    for (ch = 0; ch < LEDC_TEST_CH_NUM; ch++) {
        ledc_cb_register(ledc_channel[ch].speed_mode, ledc_channel[ch].channel, &callbacks, (void *) counting_sem);
    }

    while (1) {
        printf("1. Fade UP to duty = %d\n", LEDC_TEST_DUTY);
        for (ch = 0; ch < LEDC_TEST_CH_NUM; ch++) {
            ledc_set_fade_with_time( ledc_channel[ch].speed_mode,
                                     ledc_channel[ch].channel, 
                                     LEDC_TEST_DUTY, 
                                     LEDC_TEST_FADE_TIME);

            ledc_fade_start( ledc_channel[ch].speed_mode,
                             ledc_channel[ch].channel, 
                             LEDC_FADE_NO_WAIT);
            
            int dci = 0; //Variável global para armazenar o duty cicle instantâneo
            
            while (dci < LEDC_TEST_DUTY){
                //Atribuindo o valor instantâneo do duty cicle à variável criada
                dci = ledc_get_duty(LEDC_HS_MODE, ledc_channel[ch].channel);
                printf("Duty cicle instantâneo do LED %d: %.2f%%\n", ch, 100*(dci/4095.0));
                vTaskDelay(pdMS_TO_TICKS(1000));
            }

            vTaskDelay(pdMS_TO_TICKS(500));
        }

        for (int i = 0; i < LEDC_TEST_CH_NUM; i++) {
            xSemaphoreTake(counting_sem, portMAX_DELAY);
        }

        printf("2. Fade DOWN to duty = 0\n");
        for (ch = 0; ch < LEDC_TEST_CH_NUM; ch++) {
            ledc_set_fade_with_time( ledc_channel[ch].speed_mode,
                                     ledc_channel[ch].channel, 
                                     0, 
                                     LEDC_TEST_FADE_TIME);

            ledc_fade_start( ledc_channel[ch].speed_mode,
                             ledc_channel[ch].channel, 
                             LEDC_FADE_NO_WAIT);
            
            int dci = 0; //Variável global para armazenar o duty cicle instantâneo

            while (dci > 0){
                //Atribuindo o valor instantâneo do duty cicle à variável criada
                dci = ledc_get_duty(LEDC_HS_MODE, ledc_channel[ch].channel);
                printf("Duty cicle instantâneo do LED %d: %.2f%%\n", ch, 100*(dci/4095.0));
                vTaskDelay(pdMS_TO_TICKS(1000));
            } 

            vTaskDelay(pdMS_TO_TICKS(500));      
        }

        for (int i = 0; i < LEDC_TEST_CH_NUM; i++) {
            xSemaphoreTake(counting_sem, portMAX_DELAY);
        }

        vTaskDelay(1000 / portTICK_PERIOD_MS);

/*
        //UTILIZADO PARA VARIAÇÃO INSTANTÂNEA, TALVEZ POSSA SER IMPLEMENTADO
        printf("4. LEDC set duty = 0 without fade\n");
        for (ch = 0; ch < LEDC_TEST_CH_NUM; ch++) {
            ledc_set_duty(ledc_channel[ch].speed_mode, ledc_channel[ch].channel, 0);
            ledc_update_duty(ledc_channel[ch].speed_mode, ledc_channel[ch].channel);   
        }

*/

        vTaskDelay(1000 / portTICK_PERIOD_MS);
    }
}
